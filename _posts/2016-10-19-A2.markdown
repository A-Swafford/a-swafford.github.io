---
layout: post
title: "Random Numbers & Sampling"
subtitle: "Getting python to do your work for you."
date: 2016-10-19 0:02:00
author: "Andrew Swafford"
header-img: "/images/posts/pic04.jpg"
comments: true
tags: [ Python, Tutorial ]
---

## Random Number Generation
At some point in your coding career you will find yourself in need of creating either a large set of random numbers, or a small set of very large random numbers.  For random number generation, it seems intuitive to turn to computers as the human mind cannot be relied upon to choose truly ‘random’ numbers.  However, your inclinations and trust in computers would, in this instance, be misplaced! Random number generators on computers are NOT truly random number generators.  While they come close, these generators follow a set of rules and therefore cannot produce truly random numbers.  

Although mostly an esoteric comment, it is meant to highlight the point that if you do find yourself using a random number generator in your work, it is important to report the module and version you used in case issues in the generating algorithm are discovered later.

That said, generating random numbers in python is a simple process through a variety of generators, there is the native ‘random’ and ‘os’ module, the ‘numpy’ module and the ‘scipy’ module For most bioinformatics, the random number generators in ‘os’ will be overkill as they are for producing crypographically secure keys.  

We already have the ‘random’ module installed (native with python) and we previously installed the ‘numpy’ module.  Because you will undoubtedly have to learn to read the python doc sheets, this tutorial will just provide the links to the appropriate pages:

* [Random module Documentation](https://docs.python.org/2/library/random.html)  
* [Numpy module Random Documentation](http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.randint.html#numpy.random.randint)  

Let's try out a bit of code that will generate a random number and print it to the screen:  

```python
import numpy.random as nprand

rInt = nprand.randint(0,10)
print(rInt)
```  

*Voila!* a random number between 0 and 10. **Wait, what's that you say? I'm wrong?!** Congratulations for reading the documentation. If you did not, shame! It turns out that `numpy.random.randint(x,y)` picks a random number between
**x** and **y-1**.  Therefore, our script above actually only generates a random number between 0 and 9\.  
<br>  

## Random Sampling & Distributions
Now that you have the basics of generating random numbers, let’s take a look at some of the really powerful functions that these random generators allow us to use.  We should all be familiar with the general shape of several basic types of distributions.  In case you are not, here are three you might commonly see mentioned: Uniform, Gamma, Normal.  These are only a small fraction of the distributions that are possible to sample from in numpy.  The scipy module expands on that list even further.  Learning to use these properly will allow you to create sets of random data in the shape of just about any distribution.  


Now that you know how to draw random numbers from particular distributions, let’s turn our attention to one of the most common application of random number generators – creating a null distribution.  In many experiments, you will need to compare the number of times you recovered a particular result with the null hypothesis that all results are equally likely to be recovered.  To do this, you will need to create a null distribution of your data, which can be done using the ‘random.choice’ class in the ‘numpy’ module.  
<br>  

## Exercises  

#### Exercise 1  
Write a script that uses the random number generator in each module (random, numpy) that produces a list of 10,000 random integers between the numbers 2 and 999, inclusive.
<details>
<summary>Hints</summary>  
(We'll talk about the last two more in the next lesson)  
 <ul>
  <li>Remember to import the modules with ‘import random’ and ‘import numpy’.</li>  
  <li>Using ‘list.append(value)’ will put additional values into an existing list</li>  
  <li>While loops are your friends!</li>
 </ul>
</details>
<details> 
  <summary>Answers</summary>  
   {% gist A-Swafford/5aa9815ce4e2e0cdaaec4d1d74fb91eb %}
  </details>
<br/>
<br/>  

#### Exercise 2
Create a script that does the following:

1. Creates a list of 10 values drawn from each distribution:  
 * Normal with mean 5.
 * Uniform with min 0, max 10.
 * Gamma with shape 5 and scale 1.
2. Compares the probability of drawing the integer 10 from each distribution.
3. Prints the probability of drawing a 10 from each distribution onto the screen.
<details><summary>Hints</summary>  
   whoops, nothing here yet!
  </details>  
<details> 
  <summary>Answers</summary>  
  Not so fast!...actually there's just nothing here yet!
</details>
<br/>
<br/>  

#### Exercise 3  
Create a script that does the following from an initial list of integers from 0-9:
1. Creates a list of 10,000 random draws, with replacement, from the initial list.
2. Creates a list of 10 lists of 4 random draws, without replacement, from the initial list.
<details> 
  <summary >Hints</summary>  
   whoops, nothing here yet!
  </details>  
<details> 
  <summary>Answers</summary>  
  Not so fast!...actually there's just nothing here yet!  
</details>
<br/>
<br/>  
  
  :bell: