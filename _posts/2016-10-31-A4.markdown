---
layout: post
title: "Scripting File Manipulation"
subtitle: "The First Step to Creating Pipelines."
date: 2016-10-31 0:02:00
author: "Andrew Swafford"
comments: true
category: Tutorials
tags: [Python,Tutorial]
---  

### Introduction:

File manipulation is something that python excels at.  I would argue that learning python just as a way to script file management and conversion is a worthwhile pursuit.  Mastering programmatic file manipulation opens the door to building pipelines, checkpoints, and a deeper understanding of standardization practices.  In this tutorial, I will quickly mention basics you should be familiar with, then go on to explain more useful features available.  Finally, I will spend a considerable amount of time introducing the OS module and how it can be used in your scripts.

### The Basics  

Basic file manipulation in python is achieved through a simple function called: OPEN.  This function is native to the basic python initialization and does not need to be imported.  OPEN() gives you several options, but will attempt to open any file in one of six formats, Append, Read, Write, and their buffered counterparts.  For most of your uses, using the non-buffered calls should be fine, but if you are opening binary files, use the buffered call to avoid encoding the bytes.  Let’s take a look at what each call does using this text file.

First off, to define which call you want to use when opening a file, you use the first letter of the call, or the first letter followed by ‘b’ if you wish to use the buffered call.  Save the text file in a location and create a new text document in the same folder.  Then, manually rename this text file to whatever you want with the ‘.py’ extension. This file will be your script.  Right click and open the script with IDLE, this will give you the ability to press ‘F5’ and execute the script.  Now that you’re set up, let’s try out some code.  We’ll start with the basics, just importing and printing the file to the screen.  

#### Open and Read a File - 'r':  

{% highlight python %}
inputfile = “our_test_file.txt”
opened_file = open(inputfile,’r’)
for line in opened_file:
	print line
opened_file.close()
{% endhighlight %}
Copy and paste this code into your IDLE script, then hit F5. It will prompt you to save (select 'ok') then run the script!

This code uses the 'r' call to 'read' the file, then prints each line to the screen using a for loop to iterate through the file.  Lastly and **very importantly**, we close the file.  Without this, the computer will still think the file is open and will not allow other programs to edit or open it until you restart your computer.  Now that you're familiar with the 'r' call - let's look at 'a' and 'w'.  

#### Append data to a file - 'a':  

{% highlight python %}
inputfile = "our_test_file.txt"
with open(inputfile,'a') as opened_file:
	opened_file.write("This line was added with my script!")
	for line in opened_file: print line
with open(inputfile,'r') as opened_file:
	for line in opened_file: print line
{% endhighlight %}
This appends text to a file then prints the changed file to the screen. The 'a' call will open the file and effectively "place the cursor" at the last characer of the file.  Because of this, we write a line break using the regex symbol '\n' and then write the third line.  

**What about closing the file?!?!** Good on you for catching that! However, the .close() function is built in when you use the `with open(XX) as YY:` command.

#### Write a new file - 'w'  

Lastly, there is the 'w' call.  it is important to know that **the 'w' call is destructive!** If you open a file with the 'w' call, that file and *all* of it's contents will be overwritten without prompt or warning.  Now that you're aware, let's use the 'w' call to create a new file!  

{% highlight python %}
inputfile = "our_NEW_file.txt"
with open(inputfile,'w') as opened_file:
	opened_file.write("The 'w' call is DESTRUCTIVE.\n Be careful!")
with open(inputfile,'w') as opened_file:
	for line in opened_file: print line
{% endhighlight %}  

This script creates a file named "our_NEW_file" in the folder you were working in (go ahead and check), writes in the file, then prints it back to the screen.  Now that you know the basics about opening, reading and editing files, let's talk about navigation and directories.

### Directories & File Paths

#### Directories

For the uninitiated, a "directory" is the equivalent to a "folder".  It gives the computer a reference point for where files can be located in your computer, ensuring each file has a unique ID when the computer is referencing it.  Directories, like files, can be created and destroyed through the use of the `os` module native to python.  Here's an example of a script that will create a directory.  Create a new python script like you did above and paste the following code into it:
{% highlight python %}
import os,errno
paths = "new_FOLDER"
try:
    os.makedirs(paths)
    print "Directory created!"
except OSError as exc: # Python >2.5
    if exc.errno == errno.EEXIST:
        pass
	    print "This directory already exists!"
    else: raise
{% endhighlight %}

This script is, admittedly, a little more complex, but that's because we do something called error catching.  You can think of the 'try/except' functions as a special case of 'if/elseif'. let's break this down:
`import os,errno`: imports the modules we'll need
`try`:  creates a try statement..which executes the contained code unless an error occurs.
`os.makedirs(paths)`: This uses the *.makedirs()* function to create a new directory! but it will fail if we're trying to create a directory that already exists.
`except OSError as exc:`: Triggers if an error is thrown inside the *'try'* statement.
`if exc.errno == errno.EEXIST:`: If the error that was thrown was because the directory already exists, execute the payload.
`pass`: Do nothing and continue executing code as normal.
`else: raise` If the error that was thrown was **not** because the directory already exists - stop executing code and raise the error to the user.  
That's it! you can now use & understand this code to create directories programatically.  This is especially useful if you would like to automatically create directories based on filenames...now, let's find out how to pull those filenames into variables!

#### File Paths  

File paths can be mined and manipulated using the `os` module as well.  There are three very helpful functions of the `os` module when manipulation filepaths: path, file, name & extension.

##### Getting the Path  

{% highlight python %}
import os

inputfile = "our_test_file.txt."
pathList_fullpath = os.path.abspath(inputfile)
pathList_path = os.path.dirname(pathList_fullpath)
print pathList_path
{% endhighlight %}
Here, you will see the file paths printed out.  `os.path.abspath(XX)` finds the path, *including* the file and extension.  The benefit of using `.abspath()` is that it performs this retrieval in a OS sensitive manner, meaning that your script will work equally well on Windows and Unix systems.  `os.path.dirname(YY)` then pulls the path that will land you in the same directory as the initial file **XX**.  Great, but what about just getting the name of file **XX**.

##### Getting the File  

{% highlight python %}
import os

inputfile = "our_test_file.txt."
pathList_fullpath = os.path.abspath(inputfile)
pathList_file = os.path.basename(pathList_fullpath)
print pathList_file
{% endhighlight %}
Here, we use `.basename(YY)` to get the 'base' of the filepath.  This gives us the combination of the extension and the filename together in one variable.  But how do we get just the name or extension?

##### Getting the Name & Extension

{% highlight python %}
import os

inputfile = "our_test_file.txt."
pathList_fullpath = os.path.abspath(inputfile)
pathList_file = os.path.basename(pathList_fullpath)
pathList_name = ".".join(pathList_file.split(".")[:-1])
pathList_ext = pathList_file.split(".")[-1]
print "name:",pathList_name
print "ext:",pathList_ext
{% endhighlight %}
This code takes our file stored in *pathList_file* and splits it into a list at any period that exists in the name using the ever useful `.split()` function.  However, being the clever programmer that you are, you realize that some end user, bless their heart, may have put a period in their file name.  To circumvent this, we use backwards list slices (using negative numbers) to join all members of the list **except the last one** using the `"."join(LIST)` function.  This takes all members of *LIST* and joins them with a ' **.** '.  Lastly, we extract the file extension by grabbing the **last** item in the list created by our *.split()* function.  We know this will work because the characters after the *last* period will always be the extension.

### Exercises  

#### Exercise 1:
Download this file (link) and create a script that opens the file and copies every other line to a new file.
<details> 
  <summary>Answers</summary>  
  Not so fast!...actually there's just nothing here yet!  
</details><br/>

#### Exercise 2:
Using the original file above, create a script that creates a directory with the same name as the original file then puts each line of the original file into a new file inside the new directory.
<details> 
  <summary>Answers</summary>  
  Not so fast!...actually there's just nothing here yet!  
</details>
